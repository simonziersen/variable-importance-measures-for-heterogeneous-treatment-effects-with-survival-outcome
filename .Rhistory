getwd()
library(riskRegression)
library(survival)
library(data.table)
library(glmnet)
library(survival)
library(mgcv)
library(riskRegression)
f1_tmp <- list.files("functions", full.names = TRUE)
f1 <- f1_tmp[grepl(".R", f1_tmp)]
lapply(f1, source)
# Cox-Weibull distribution function and its invers
inv_weibull <- function(u, theta, scale, shape){
t <- (-log(u) / (scale * exp(theta))) ^ (1 / shape)
return(t)
}
weibull <- function(t, theta, scale, shape){
p <- exp(-scale*exp(theta)*t^shape)
return(p)
}
expit <- function(x) exp(x)/(1+exp(x))
# Set parameters
times <- 10                      # event horizon
shape <- 2                      # shape parameter for weibull distributed event times
scale <- 0.0025                    # scale parameter for weibull distributed event times
n <- 1000
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
x4 <- rnorm(n)
xx <- data.frame(x1,x2,x3,x4)
A <- rbinom(n, 1, expit(0.3*x1 + 0.3*x2))
eventTime <- inv_weibull(runif(n), theta = -x1 - x2 - 0.2*x3 + 0.1*x4 + A*(-2 + 0.5*x1 - 0.3*x2), scale = scale, shape = shape)
censTime <- inv_weibull(runif(n), theta = -0.3*x1, scale = 0.1*scale, shape = shape)
obsTime <- pmin(eventTime, censTime)
delta <- 1*(eventTime <= censTime)
A_fac <- factor(A)
S <- survML(time = obsTime, status = delta, X = xx, A = A, method = "coxph", form = "x1*A+x2*A+x3+x4")
tau <- resSurv(S, newtimes = times, newX = xx, newA = 1) -
resSurv(S, newtimes = times, newX = xx, newA = 0)
rm(list=ls())
library(survival)
library(mgcv)
library(riskRegression)
f1_tmp <- list.files("functions", full.names = TRUE)
f1 <- f1_tmp[grepl(".R", f1_tmp)]
lapply(f1, source)
# Cox-Weibull distribution function and its invers
inv_weibull <- function(u, theta, scale, shape){
t <- (-log(u) / (scale * exp(theta))) ^ (1 / shape)
return(t)
}
weibull <- function(t, theta, scale, shape){
p <- exp(-scale*exp(theta)*t^shape)
return(p)
}
expit <- function(x) exp(x)/(1+exp(x))
# Set parameters
times <- 10                      # event horizon
shape <- 2                      # shape parameter for weibull distributed event times
scale <- 0.0025                    # scale parameter for weibull distributed event times
n <- 1000
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
x4 <- rnorm(n)
xx <- data.frame(x1,x2,x3,x4)
A <- rbinom(n, 1, expit(0.3*x1 + 0.3*x2))
eventTime <- inv_weibull(runif(n), theta = -x1 - x2 - 0.2*x3 + 0.1*x4 + A*(-2 + 0.5*x1 - 0.3*x2), scale = scale, shape = shape)
censTime <- inv_weibull(runif(n), theta = -0.3*x1, scale = 0.1*scale, shape = shape)
obsTime <- pmin(eventTime, censTime)
delta <- 1*(eventTime <= censTime)
A_fac <- factor(A)
correctGAMprob <- teVimSurv_tmp(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "gam", interactions = TRUE)),
evaltimes = times,
folds = 1)
correctGAMprob
rm(list=ls())
library(survival)
library(mgcv)
library(riskRegression)
f1_tmp <- list.files("functions", full.names = TRUE)
f1 <- f1_tmp[grepl(".R", f1_tmp)]
lapply(f1, source)
# Cox-Weibull distribution function and its invers
inv_weibull <- function(u, theta, scale, shape){
t <- (-log(u) / (scale * exp(theta))) ^ (1 / shape)
return(t)
}
weibull <- function(t, theta, scale, shape){
p <- exp(-scale*exp(theta)*t^shape)
return(p)
}
expit <- function(x) exp(x)/(1+exp(x))
# Set parameters
times <- 10                      # event horizon
shape <- 2                      # shape parameter for weibull distributed event times
scale <- 0.0025                    # scale parameter for weibull distributed event times
n <- 1000
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
x4 <- rnorm(n)
xx <- data.frame(x1,x2,x3,x4)
A <- rbinom(n, 1, expit(0.3*x1 + 0.3*x2))
eventTime <- inv_weibull(runif(n), theta = -x1 - x2 - 0.2*x3 + 0.1*x4 + A*(-2 + 0.5*x1 - 0.3*x2), scale = scale, shape = shape)
censTime <- inv_weibull(runif(n), theta = -0.3*x1, scale = 0.1*scale, shape = shape)
obsTime <- pmin(eventTime, censTime)
delta <- 1*(eventTime <= censTime)
A_fac <- factor(A)
correctGAMprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "gam", interactions = TRUE)),
evaltimes = times,
folds = 1)
correctGAMCFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "gam", interactions = TRUE)),
evaltimes = times,
folds = 10)
correctRFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "rfsrc", interactions = TRUE)),
evaltimes = times,
folds = 1)
correctRFCFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "rfsrc", interactions = TRUE)),
evaltimes = times,
folds = 10)
# RF
RFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "rfsrc", num.threads = 1),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoReg = list(method = "rfsrc")),
evaltimes = times,
folds = 1)
gc()
cat("RF done")
RFGAMprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "rfsrc", num.threads = 1),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoReg = list(method = "gam", interactions = TRUE)),
evaltimes = times,
folds = 1)
gc()
cat("RFGAM done")
RFCFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "rfsrc", num.threads = 1),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoReg = list(method = "rfsrc")),
evaltimes = times,
folds = 10)
gc()
cat("RFCF done")
RFGAMCFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "rfsrc", num.threads = 1),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoReg = list(method = "gam", interactions = TRUE)),
evaltimes = times,
folds = 10)
gc()
cat("RFGAMCF done")
rescorrectprob <- rbind(c(unlist(correctGAMprob), method = "correctGAM"),
c(unlist(correctGAMCFprob), method = "correctGAMCF"),
c(unlist(correctRFprob), method = "correctRF"),
c(unlist(correctRFCFprob), method = "correctRFCF"))
resrfprob <- rbind(c(unlist(RFprob), method = "RF"),
c(unlist(RFGAMprob), method = "RFGAM"),
c(unlist(RFCFprob), method = "RFCF"),
c(unlist(RFGAMCFprob), method = "RFGAMCF"))
resprob <- rbind(rescorrectprob, resrfprob)
rm(list=ls())
library(survival)
library(mgcv)
library(riskRegression)
f1_tmp <- list.files("functions", full.names = TRUE)
f1 <- f1_tmp[grepl(".R", f1_tmp)]
lapply(f1, source)
# Cox-Weibull distribution function and its invers
inv_weibull <- function(u, theta, scale, shape){
t <- (-log(u) / (scale * exp(theta))) ^ (1 / shape)
return(t)
}
weibull <- function(t, theta, scale, shape){
p <- exp(-scale*exp(theta)*t^shape)
return(p)
}
expit <- function(x) exp(x)/(1+exp(x))
# Set parameters
times <- 10                      # event horizon
shape <- 2                      # shape parameter for weibull distributed event times
scale <- 0.0025                    # scale parameter for weibull distributed event times
n <- 1000
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
x4 <- rnorm(n)
xx <- data.frame(x1,x2,x3,x4)
A <- rbinom(n, 1, expit(0.3*x1 + 0.3*x2))
eventTime <- inv_weibull(runif(n), theta = -x1 - x2 - 0.2*x3 + 0.1*x4 + A*(-2 + 0.5*x1 - 0.3*x2), scale = scale, shape = shape)
censTime <- inv_weibull(runif(n), theta = -0.3*x1, scale = 0.1*scale, shape = shape)
obsTime <- pmin(eventTime, censTime)
delta <- 1*(eventTime <= censTime)
A_fac <- factor(A)
correctGAMprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "gam", interactions = TRUE)),
evaltimes = times,
folds = 1)
A_fac
rm(list=ls())
getwd()
library(survival)
library(mgcv)
library(riskRegression)
f1_tmp <- list.files("functions", full.names = TRUE)
f1 <- f1_tmp[grepl(".R", f1_tmp)]
lapply(f1, source)
rm(list=ls())
library(survival)
library(mgcv)
library(riskRegression)
f1_tmp <- list.files("functions", full.names = TRUE)
f1 <- f1_tmp[grepl(".R", f1_tmp)]
lapply(f1, source)
# Cox-Weibull distribution function and its invers
inv_weibull <- function(u, theta, scale, shape){
t <- (-log(u) / (scale * exp(theta))) ^ (1 / shape)
return(t)
}
weibull <- function(t, theta, scale, shape){
p <- exp(-scale*exp(theta)*t^shape)
return(p)
}
expit <- function(x) exp(x)/(1+exp(x))
# Set parameters
times <- 10                      # event horizon
shape <- 2                      # shape parameter for weibull distributed event times
scale <- 0.0025                    # scale parameter for weibull distributed event times
n <- 1000
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
x4 <- rnorm(n)
xx <- data.frame(x1,x2,x3,x4)
A <- rbinom(n, 1, expit(0.3*x1 + 0.3*x2))
eventTime <- inv_weibull(runif(n), theta = -x1 - x2 - 0.2*x3 + 0.1*x4 + A*(-2 + 0.5*x1 - 0.3*x2), scale = scale, shape = shape)
censTime <- inv_weibull(runif(n), theta = -0.3*x1, scale = 0.1*scale, shape = shape)
obsTime <- pmin(eventTime, censTime)
delta <- 1*(eventTime <= censTime)
A_fac <- factor(A)
correctGAMprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "gam", interactions = TRUE)),
evaltimes = times,
folds = 1)
correctGAMprob
correctGAMCFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "gam", interactions = TRUE)),
evaltimes = times,
folds = 10)
correctRFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "rfsrc", interactions = TRUE)),
evaltimes = times,
folds = 1)
correctRFCFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "coxph", form = "x1*A+x2*A+x3+x4"),
cens = list(method = "coxph"),
prop = list(method = "glm", interactions = FALSE),
pseudoReg = list(method = "rfsrc", interactions = TRUE)),
evaltimes = times,
folds = 10)
# RF
RFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "rfsrc", num.threads = 1),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoReg = list(method = "rfsrc")),
evaltimes = times,
folds = 1)
gc()
cat("RF done")
RFGAMprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "rfsrc", num.threads = 1),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoReg = list(method = "gam", interactions = TRUE)),
evaltimes = times,
folds = 1)
gc()
cat("RFGAM done")
RFCFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "rfsrc", num.threads = 1),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoReg = list(method = "rfsrc")),
evaltimes = times,
folds = 10)
gc()
cat("RFCF done")
RFGAMCFprob <- teVimSurv(time = obsTime,
status = delta,
treatment = A_fac,
confounders = xx,
s = 1,
nuisance = list(surv = list(method = "rfsrc", num.threads = 1),
cens = list(method = "rfsrc"),
prop = list(method = "rfsrc"),
pseudoReg = list(method = "gam", interactions = TRUE)),
evaltimes = times,
folds = 10)
gc()
cat("RFGAMCF done")
rescorrectprob <- rbind(c(unlist(correctGAMprob), method = "correctGAM"),
c(unlist(correctGAMCFprob), method = "correctGAMCF"),
c(unlist(correctRFprob), method = "correctRF"),
c(unlist(correctRFCFprob), method = "correctRFCF"))
resrfprob <- rbind(c(unlist(RFprob), method = "RF"),
c(unlist(RFGAMprob), method = "RFGAM"),
c(unlist(RFCFprob), method = "RFCF"),
c(unlist(RFGAMCFprob), method = "RFGAMCF"))
resprob <- rbind(rescorrectprob, resrfprob)
resprob
